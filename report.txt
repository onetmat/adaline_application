
Some of Widrow's earliest works mention physical ADALINE circuits [BIB:ADALINE INTRO][BIB:SMARTER THAN SWEET].
In (MSA - YEAR OF BlackJack paper), Widrow specifically mentions utilization of a notional ADALINE[BIB:PUNISH/REWARD] and while in some of the cornerstone Computational Intelligence literature, such as that of Paul Werbos [BIB:BPTT], clever representations allow for large, fast neural networks using limited hardware, modern hardware provides the resources to take a more naive approach.

??? Something about how a naive approach allows many ADALINEs to come into being quickly without having to worry about specifics.

The basic requirements of the naive approach map directly onto the typical ADALINE picture from the literature [BIB:ADALINE INTRO][BIB:... Find another]:
   * A set of input signals
   * A vector of weights
   * An output value 
From the same literature, the weight vector does not have any initial requirements although the purpose of an ADALINE is to adjust its own weights to provide a desired output.
Therefore the notional ADALINE populates itself with random weights in the absence of user specified values. 
The input vector must provide write access at any time to be of any use and read access to faciliate iterative logging.
A stored output value with read-only access allows iterative logging.
The UML for such a class would look like: (MSA - UML HERE)

The internal representation of the signal and weight vectors might involve bit fields and clever bitwise memory copies to allow easy population.
Again, the naive approach eases understanding:
Let s(k) represent input signal k where 0 <= k <= n and n represents the total number of input signals accepted by the notional ADALINE plus a bias value.
By definition, n also represents the length of the weight vector.
Each element in the weight vector, due to the continuity requirement of the learning algorithm, must reside within the set of real numbers[BIB:ADALINE INTRO].
The inputs into the circuit might represent quantized input, as in the pressure readings from weather data [BIB:WEATHER PREDICTION], or it may be binary input, as in the presence of a particular playing card in any given hand [BIB:PUNISH/REWARD].
With proper modeling, the input signals may reside within the set of integers[BIB:SMARTER THAN SWEET].

?? A notional signal will inform the circuit to look for desired output for a given input. ??

An ADALINE circuit might be learning or generalizing.
In either mode, the circuit generally undergoes the following phases:
   * Accept Input Signals
   * Weigh Inputs
   * Quantize Output
If generalizing, the ADALINE will repeat the process.
If learning, there are additional phases which in specific applcation according to the learning method applied:
   * Determine Error Signal
   * Adjust weights
The error signal determination, according to Widrow and Hoff in [BIB: ADALINE INTRO], should derive from the output before quantization.
Other papers, such as [BIB:PUNISH/REWARD], derives the error from the quantized output of multiple ADALINE runs.
These results indicate that either approach results in convergent learning, although [BIB:PUNISH/REWARD] only proves convergence based on a series of decisions.

What better way to unit test a code segment than with proven data? Widrow and Hoff [BIB: ADALINE INTRO] provide all of the data required to recreate their experiment.
Specifically, it must be possible to train a notional Adaline to recognize a T, F, and G shapes with similar error curves to that found in [BIB: ADALINE INTRO].
The specific sum of square errors may differ due to initial weights, but the error must converge to near zero.
As in the paper, training the notional adaline requires approximately 50 iterations of all six sample patterns.

[BIB:PUNISH/REWARD] proves convergence for a Gaussian approximation of the game of Blackjack.
The goal here involves appeasing a critic with no apparant rhyme or reason to its actions.

Core problem involves defining input signals and making decisions based on them.
Principally two signals; dimension of root node and total height of tree include root node and leaf nodes.
Can hook up these signals by representation as a bit string.
Output sent through hyperbolic tangent, quantized output yields a decision to either push down a level, extend the bounds by a fixed increment, or yield.
Yield maps to "stand" in Blackjack, implying that the adaline output needs judgement.

Ultimate solution, most reliable, required boundary fixed on even powers of two high enough such that the leaf nodes had length of one (UOM depended on projection, assumed to be homogeneous).
